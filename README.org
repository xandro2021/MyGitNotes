#+title: Git and Github
#+author: Alejandro Salazar

* About
#+NAME: GitHub
#+CAPTION: A cool free image about GitHub
#+attr_html: :width 50 px
#+attr_html: :height 50 px
#+html: <p align="center"><img src="./git.png" /></p>
* Menu :toc:
- [[#about][About]]
- [[#preintroductory-commands][PreIntroductory Commands]]
  - [[#check-git-version][Check Git Version]]
  - [[#getting-help-with-git][Getting Help with Git]]
  - [[#setting-git-user][Setting git user]]
- [[#git][GIT]]
  - [[#initialize][Initialize]]
  - [[#git-status][Git Status]]
  - [[#see-the-changes-in-the-folder][See the changes in the folder]]
  - [[#add-elements-in-the-staged-area][Add elements in the staged area]]
  - [[#remove-elements-from-the-staged-area][Remove elements from the staged area]]
  - [[#creating-the-first-instant-copy-of-the-proyect-or-staged-elements][Creating the first instant copy of the proyect or staged elements]]
  - [[#creating-a-commit-and-pushing-the-elements-to-the-stage-area-with-only-one-command][Creating a commit and pushing the elements to the stage area with only one command]]
  - [[#fixing-the-description-message-of-last-commit][Fixing the description message of last commit]]
  - [[#see-all-the-copies-made-by-git-for-the-project][See all the copies made by git for the project]]
  - [[#return-the-project-to-an-earlier-stage][Return the project to an earlier stage]]
  - [[#return-the-project-to-an-earlier-stage-or-copy][Return the project to an earlier stage or copy]]
  - [[#creating-a-tag-for-github][Creating a Tag for Github]]
  - [[#branches][Branches]]

* PreIntroductory Commands
** Check Git Version
+ Useful to see the current git version of if it is not installed at all
#+begin_src bash
git --version
#+end_src
** Getting Help with Git
*** General Help for all the commands in git
#+begin_src bash
git help
man git
#+end_src
*** Help for a specific command
#+begin_src bash
git help commit
#+end_src
** Setting git user
*** Setting the name
#+begin_src bash
git config --global user.name "Alejandro Salazar"
#+end_src
*** Setting the email
#+begin_src bash
git config --global user.email "myemail@gmail.com"
#+end_src
*** To see the changes in the git user
+ You can even modify all the current config from there instead of writing the commands again
#+begin_src bash
git config --global -e
#+end_src
* GIT
** Initialize
+ Turn the current folder you are working on into a git repository
+ This command will create the hidden folder .git
+ Create the local repository
#+begin_src bash
git init
#+end_src
** Git Status
+ This command gives information about the current branch you are working on
+ It also notifies which files in the current repository are untracked by git
+ It also notifies about the files which are ready to be commited (the staged files)
+ It shows all the files within the repository that have been modified including staged and untracked files
#+begin_src bash
git status
#+end_src
** See the changes in the folder
+ The "??" symbols means that those files or folders have not been added to stage where is being tracked by git
+ The symbol "A" means the file/folder is already being tracked by git because of it being in the stage area
+ The symbol "M" in color red means the stagged file/folder was modified, and those changes have not being reported to the stage area by the user
+ The symbol "M" in color green means the stagged file/folder was modified, and those changes were already reported to the stage area by the user
#+begin_src bash
git status -s
#+end_src
** Add elements in the staged area
+ Command use to stage the untracked files to be ready for the commit
+ The add command send the element to the stage area. Therefore, the next time you write the previous command, instead of the symbols "??", it will appear and "A" symbol
#+begin_src bash
git add index.html
git add .
#+end_src
** Remove elements from the staged area
+ Any of the two commands unstaged the desired file
#+begin_src bash
git reset fileName
git rm --cached fileName
#+end_src
** Creating the first instant copy of the proyect or staged elements
+ Take a picture of the current repository which saves the current staged files
+ Create a historical register of the repository with all the changes made in the staged files
#+begin_src bash
git commit -m "my new message to identify this commit"
#+end_src
** Creating a commit and pushing the elements to the stage area with only one command
#+begin_src bash
git commit -am "Description of the changes for this commit"
#+end_src
** Fixing the description message of last commit
#+begin_src bash
git commit --amend
#+end_src
** See all the copies made by git for the project
#+begin_src bash
git log --oneline
#+end_src
** Return the project to an earlier stage
+ Rebuild or return the project exactly as it was in the last commit
+ It restore everything except the untracked filed
#+begin_src bash
git checkout -- .
#+end_src
** Return the project to an earlier stage or copy
+ The alphanumeric thing at the end is just an example about a possible visible value from git log in order to return to the expected git copy
+ This command delete all the copies that comes after the selected commit or copy. You return in the time, as if all those commits have never existed before
#+begin_src bash
git reset --hard 01cdac6
#+end_src
** Creating a Tag for Github
#+begin_src bash
git tag 29-10-22v1 -m "First Project Version"
#+end_src
** Branches
*** Creating a Branch
#+begin_src bash
git branch nameOfMyBranch
#+end_src
*** See the existing branches
+ Both commands show the existing branches in the project, although it is more clear in git branch
+ Git branch list all the branches and mark the exact branch you are currently working on
#+begin_src bash
git branch
git log --oneline
# only shows the current branch
git status
#+end_src
*** Change the current branch you are working on
#+begin_src bash
git checkout nameOfMyBranch
#+end_src
*** Create and immediately change into the new branch
#+begin_src bash
git checkout -b nameOfMyBranch
#+end_src
*** Merge a branch
+ Return to the main branch and then use the command merge
#+begin_src bash
git checkout main
git merge nameOfMyBranch
#+end_src
*** Delete a branch
#+begin_src bash
git branch -d nameOfMyBranch
#+end_src
