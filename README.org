#+title: Git and Github
#+author: Alejandro Salazar

* About
** Cover
#+NAME: GitHub
#+CAPTION: A cool free image about GitHub
#+attr_html: :width 50 px
#+attr_html: :height 50 px
#+html: <p align="center"><img src="./git.png" /></p>
** Description
This is just a list of git commands to help me to remember and learn them
Those could be a nice help to work together with others in bootcamps like codeio, 4geeks, and so on, or as a professional developer
* Menu :toc:
- [[#about][About]]
  - [[#cover][Cover]]
  - [[#description][Description]]
- [[#preintroductory-commands][PreIntroductory Commands]]
  - [[#check-git-version][Check Git Version]]
  - [[#getting-help-with-git][Getting Help with Git]]
  - [[#setting-git-user][Setting git user]]
  - [[#creating-aliases-in-git][Creating Aliases in Git]]
- [[#git][GIT]]
  - [[#initialize][Initialize]]
  - [[#git-status][Git Status]]
  - [[#important-notes][IMPORTANT NOTES!!!!]]
  - [[#add-elements-in-the-staged-area][Add elements in the staged area]]
  - [[#remove-elements-from-the-staged-area][Remove elements from the staged area]]
  - [[#creating-the-first-instant-copy-of-the-proyect-or-staged-elements][Creating the first instant copy of the proyect or staged elements]]
  - [[#creating-a-commit-and-pushing-the-elements-to-the-stage-area-with-only-one-command][Creating a commit and pushing the elements to the stage area with only one command]]
  - [[#fixing-the-description-message-of-last-commit][Fixing the description message of last commit]]
  - [[#reset][Reset]]
  - [[#linux-commands-with-git][Linux commands with git?]]
  - [[#see-all-the-copies-made-by-git-for-the-project][See all the copies made by git for the project]]
  - [[#return-the-project-to-an-earlier-stage][Return the project to an earlier stage]]
  - [[#tags][Tags]]
  - [[#branches][Branches]]
  - [[#git-diff][Git Diff]]
  - [[#stash][Stash]]
  - [[#rebase][Rebase]]
- [[#github][GitHub]]
  - [[#remote][Remote]]
  - [[#upload-tags][Upload Tags]]
  - [[#update-local-repository][Update local repository]]
  - [[#work-flow-in-github][Work-flow in GitHub]]
  - [[#clone-repository][Clone repository]]

* PreIntroductory Commands
** Check Git Version
+ Useful to see the current git version of if it is not installed at all
#+begin_src bash
git --version
#+end_src
** Getting Help with Git
*** General Help for all the commands in git
#+begin_src bash
git help
man git
#+end_src
*** Help for a specific command
#+begin_src bash
git help commit
#+end_src
** Setting git user
*** Setting the name
#+begin_src bash
git config --global user.name "Alejandro Salazar"
#+end_src
*** Setting the email
#+begin_src bash
git config --global user.email "myemail@gmail.com"
#+end_src
*** Setting main branch
#+begin_src bash
git config --global init.defaultBranch main
#+end_src
*** To see the changes in the git user
+ You can even modify all the current config from there instead of writing the commands again
#+begin_src bash
git config --global -e
#+end_src
** Creating Aliases in Git
*** Creating the alias
+ git config --global alias.newAliasNameInventedByTheUser {command that comes after git}
**** Simple Alias
Example:
#+begin_src bash
git config --global alias.s "status --short"
#+end_src
**** Complex Alias
#+begin_src bash
git config --global alias.lg "log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(bold yellow)%d%C(reset)' --all"
#+end_src
*** Editing the alias
#+begin_src bash
git config --global -e
#+end_src
* GIT
** Initialize
+ Turn the current folder you are working on into a git repository
+ This command will create the hidden folder .git
+ Create the local repository
#+begin_src bash
git init
#+end_src
** Git Status
+ This command gives information about the current branch you are working on
+ It also notifies which files in the current repository are untracked by git
+ It also notifies about the files which are ready to be commited (the staged files)
+ It shows all the files within the repository that have been modified including staged and untracked files
*** Long Version (A longer description of the current state of the repository)
#+begin_src bash
git status
#+end_src
*** A shorter Description
+ The "??" symbols means that those files or folders have not been added to stage where is being tracked by git
+ The symbol "A" means the file/folder is already being tracked by git because of it being in the stage area
+ The symbol "M" in color red means the stagged file/folder was modified, and those changes have not being reported to the stage area by the user
+ The symbol "M" in color green means the stagged file/folder was modified, and those changes were already reported to the stage area by the user
+ The symbol "R" means the file or folder was rename
+ The symbol "D" means the file or folder was deleted
#+begin_src bash
git status --short
git status -s
#+end_src
** IMPORTANT NOTES!!!!
*** GitKeep
+ git ignore folders that are completely empty
+ Some projects could need an empty folder to save data generated by the program or user
+ In order to avoid broken the project as a result of the default behavior de git, The user must create a folder with an special file called .gitkeep
Example:
#+begin_src bash
mkdir uploads
touch uploads/.gitkeep
#+end_src
*** GitIgnore
+ There is going to be times, when you would want git to ignore some files that were created by third parties libraries you used in your project
+ In order to achieve that, we need to create a special git file named gitignore in the repository root
+ Some example of undesired files to keep a track of them are the node_modules, dist and a log of your local machine
Example:
1. You create the file
#+begin_src bash
touch .gitignore
#+end_src
2. Inside the file you write which folders or files to ignore
#+begin_src text
dist/
node_modules/
*.log
#+end_src
** Add elements in the staged area
+ Command use to stage the untracked files to be ready for the commit
+ The add command send the element to the stage area. Therefore, the next time you write the previous command, instead of the symbols "??", it will appear and "A" symbol
*** Single Element
#+begin_src bash
git add index.html
#+end_src
*** Add all the untracked files of one type
#+begin_src bash
git add *.html
git add folderName/*.js
#+end_src
*** Add all the untracked files (Everything)
#+begin_src bash
git add .
#+end_src
*** Add all the directories within a specific folder
+ The css file contains other directories like bootstrap
#+begin_src bash
git add css/
#+end_src
** Remove elements from the staged area
+ Any of the two commands unstaged the desired file
#+begin_src bash
git reset fileName
git rm --cached fileName
#+end_src
** Creating the first instant copy of the proyect or staged elements
+ Take a picture of the current repository which saves the current staged files
+ Create a historical register of the repository with all the changes made in the staged files
#+begin_src bash
git commit -m "my new message to identify this commit"
#+end_src
** Creating a commit and pushing the elements to the stage area with only one command
#+begin_src bash
git commit -am "Description of the changes for this commit"
#+end_src
** Fixing the description message of last commit
#+begin_src bash
git commit --amend
git commit --amend -m "new description"
#+end_src
** Reset
*** Soft
**** Include the new changes in the last commit instead of creating a new commit
+ Beware! Reset hard delete the changes but the soft one doesn't
+ you can add a number after the symbol ^ to notify how many commits you want to go back
+ In other words, we preserved all the changes but return back to the desired commit in order to make a new commit which is going to include all those changes instead of creating new commits for the new additions
#+begin_src bash
git reset --soft HEAD^
#+end_src
*** Mixed
+ This like the --soft state, it is not destructive.
+ It preserve the changes in the repository but unstaged all the changes made after the selected commit
+ you can select the desired commit to return by using the hash/id/identification
#+begin_src bash
git reset --mixed 01cdac6
#+end_src
*** Hard
**** Return the project to an earlier stage or copy and Delete the unwanted future!!
+ The alphanumeric thing at the end is just an example about a possible visible value from git log in order to return to the expected git copy
+ This command delete all the copies that comes after the selected commit or copy. You return in the time, as if all those commits have never existed before
#+begin_src bash
git reset --hard 01cdac6
#+end_src
*** Reflog
+ This command is used to preserved a log about all the changes made in the repository, including those that where deleted by reset --hard
#+begin_src bash
git reflog
#+end_src
** Linux commands with git?
+ The changes in the files made through git are kept registered.
+ Because of it being registered, you can easily recover them by using commands like git reset --hard
+ If you use the typical linux commands to do the same, git will not interpret the changes like rename as what it is but as a creation of a new file
+ That new interpretation is not desired because a rename file is losing all the registered changes it suffered since its creation if you rename the file by other means different than git mv unless you add them in the stage
*** Rename a file with git (Excellent to keep it in the log of changes)
#+begin_src bash
git mv oldName newName
#+end_src
*** Delete a file with git
#+begin_src bash
git rm fileName
#+end_src
** See all the copies made by git for the project
#+begin_src bash
git log --oneline
#+end_src
** Return the project to an earlier stage
*** Everything
+ Rebuild or return the project exactly as it was in the last commit
+ It restore everything except the untracked filed
#+begin_src bash
git checkout -- .
#+end_src
*** Just one specific file (last commit)
#+begin_src bash
git checkout -- fileName
#+end_src
*** Just one specific file to and specific hash (commit)
#+begin_src bash
git checkout 762ac65 fileName
#+end_src
** Tags
[[#upload-tags][Upload Tags]]
*** Creating
**** Creating a Tag for Github
+ This first command is not recommended due to lack of information
#+begin_src bash
git tag super-release
git tag 29-10-22v1 -m "First Project Version"
git tag -a v1.0.0 -m "Version 1.0.0 lista"
#+end_src
**** Creating a Tag for an Old Commit
#+begin_src bash
git tag -a v0.1.0 d2ac819
#+end_src
*** Show
**** Show the existing Tags
#+begin_src bash
git tag
#+end_src
**** Display more information of an specific tag
#+begin_src bash
git show tagName
git show v0.1.0
#+end_src
*** Deleting Tag
#+begin_src bash
git tag -d nameOfMyTag
#+end_src
** Branches
*** Creating a Branch
#+begin_src bash
git branch nameOfMyBranch
#+end_src
*** See the existing branches
+ Both commands show the existing branches in the project, although it is more clear in git branch
+ Git branch list all the branches and mark the exact branch you are currently working on
#+begin_src bash
git branch
git log --oneline
git status # only shows the current branch
#+end_src
*** Rename a branch
#+html: <ul><li><a href="#user-content-setting-main-branch">You can also rename the branch globally</a></li></ul>
#+begin_src bash
git branch -m currentName newName
#+end_src
*** Change the current branch you are working on
#+begin_src bash
git checkout nameOfMyBranch
#+end_src
*** Create and immediately change into the new branch
#+begin_src bash
git checkout -b nameOfMyBranch
#+end_src
*** Merge a branch
+ Return to the main branch and then use the command merge
#+begin_src bash
git merge nameOfMyBranch
#+end_src
*** Delete a branch
+ The last two commands are used to force the deletion of the branch
#+begin_src bash
git branch -d nameOfMyBranch
git branch -d nameOfMyBranch -f
git branch -D nameOfMyBranch
#+end_src
** Git Diff
*** Show the modifications in the unstaged files
#+begin_src bash
git diff
#+end_src
*** Show the modifications made in the staged files
#+begin_src bash
git diff --staged
#+end_src
** Stash
+ It is used to save the changes you have been working on, but are not ready to be integrated in the main project, and the same time you are forced to integrate into the project everything you have done.
+ For obvious reason you save into the stash all those unfinished changes that will cause troubles in the main project if you integrate them.
+ You only send to integrate the features which are finished and doesn't cause troubles
+ It is not recommended to create several stash, because it could be hard to integrate them into the project because of the possible conflicts the may arise
*** Create
**** Create Stash
#+begin_src bash
git stash
#+end_src
**** Create Stash with a Description (Recommended)
#+begin_src bash
git stash save "Your meaningful description goes here"
#+end_src
*** List and show all the stash
**** Simple
#+begin_src bash
git stash list
#+end_src
**** Descriptive
#+begin_src bash
git stash list --stat
#+end_src
*** Return
**** Return and Delete the last stash
+ Return in to the stash and delete it from the stash list
#+begin_src bash
git stash pop
#+end_src
**** Return to an specific stash
#+begin_src bash
git stash apply stash@{2}
#+end_src
*** Delete
**** All
#+begin_src bash
git stash clear
#+end_src
**** Only one in specific
#+begin_src bash
git stash drop stash@{0}
#+end_src
*** Show
+ show all the modification that were done in the stash
#+begin_src bash
git stash show stash@{1}
#+end_src
** Rebase
+ Moves the changes from the main branch to the branch you are working on
+ Update your branch with the new content added in main after you created the branch
+ You need to be positioned in your side branch in order to exec the rebase command
*** Using Rebase to add the new changes from main to your branch
#+begin_src bash
git rebase master
#+end_src
*** Using Rebase Interactive to merge(squash) split commits
+ You can also this command to edit the commits instead of combining them. Just watch the menu
For commits before HEAD (4)
#+begin_src bash
git rebase -i HEAD~4
#+end_src
* GitHub
** Remote
*** Create Remote
+ Origin is the name for the remote repository
+ We can create several remote repository for one project
**** Origin
#+begin_src bash
git remote add origin URL
#+end_src
**** Upstream
+ Upstream is a the parent repository of your origin repository if it was forked
+ It is a read only repository
#+begin_src bash
git remote add upstream URL
#+end_src
*** Show a list of the Remotes
command:
#+begin_src bash
git remote -v
#+end_src
posible output:
#+html: <p><img src="./img/gitRemote.png" /></p>
** Upload Tags
*** All
#+begin_src bash
git push --tags
#+end_src
** Update local repository
*** Pull
**** Locally for Git
***** Command
+ Use the command pull
****** Origin (Default)
#+begin_src bash
git pull
#+end_src
****** Upstream (Other remote)
#+begin_src bash
git pull remoteName branchName
git pull upstream main
#+end_src
***** Warning01
#+html: <p><img src="./img/gitWarning01.png" /></p>
solution:
#+begin_src bash
git config --global pull.ff only
#+end_src
***** Warning02
#+html: <p><img src="./img/gitWarning02.png" /></p>
solution:
#+begin_src bash
git config --global pull.rebase true
#+end_src
*** Fetch
+ Update your local repository without forcing you to make a rebase or a merge
+ Basically, it updata your references in order to see the complete history of your remote repertory
#+begin_src bash
git fetch
#+end_src
** Work-flow in GitHub
*** Feature Branch
**** Checking another team member branch (work)
+ All the team member will be working in their own branch
+ You can see their work by executing:
#+begin_src bash
git fetch
git branch -a
git checkout theBranchOfYourFriend
#+end_src
**** Merge your team member branch
+ Any team member can merge another team member branch
#+begin_src bash
git checkout master
git merge yourTeamMemberBranch
git push
#+end_src
**** Alternative to Merge by usig a Pull Request
+ This is an Alternative to the last point (merge)
+ It is more recommended because a pull request will notify the other team member and start a debate about the merging of that feature branch
#+begin_src bash
git push origin featuredBranch
#+end_src
+ The last command will update that branch in GitHub, allowing the user to start a Push Request from there
**** Working from a featured branch to main in remote (GitHub)
+ Create the branch, move into it, do all the work there to implement the desired feature and then exec the command git push
+ GitHub will tell you which command to use in order to update remote with your local feature branch
#+begin_src bash
git push
#+end_src
+ Finally you create a pull request and merge your featured branch with the main branch
** Clone repository
#+begin_src bash
git clone https://github.com/xandro2021/MyGitNotes.git
#+end_src
